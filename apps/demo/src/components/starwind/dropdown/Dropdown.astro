---
import type { HTMLAttributes } from "astro/types";

type Props = HTMLAttributes<"div"> & {
	name?: string;
	// eslint-disable-next-line @typescript-eslint/no-explicit-any
	children: any;
};

const { class: className, name, ...rest } = Astro.props;
---

<div class:list={["starwind-dropdown", "relative", className]} data-name={name} {...rest}>
	<slot />
</div>

<script>
	class DropdownHandler {
		private dropdown: HTMLElement;
		private trigger: HTMLButtonElement | null;
		private content: HTMLElement | null;
		private isOpen: boolean = false;
		private animationDuration = 150;

		constructor(dropdown: HTMLElement, dropdownIdx: number) {
			this.dropdown = dropdown;
			
			// Get the temporary trigger element
			const tempTrigger = dropdown.querySelector(".starwind-dropdown-trigger") as HTMLElement;
			
			// if trigger is set with asChild, use the first child element for trigger button
			if (tempTrigger?.hasAttribute("data-as-child")) {
				this.trigger = tempTrigger.firstElementChild as HTMLButtonElement;
			} else {
				this.trigger = tempTrigger as HTMLButtonElement;
			}
			
			this.content = dropdown.querySelector(".starwind-dropdown-content");

			if (!this.trigger || !this.content) return;

			// Get animation duration from inline styles if available
			const animationDurationString = this.content.style.animationDuration;
			if (animationDurationString.endsWith("ms")) {
				this.animationDuration = parseFloat(animationDurationString);
			} else if (animationDurationString.endsWith("s")) {
				this.animationDuration = parseFloat(animationDurationString) * 1000;
			}

			this.init(dropdownIdx);
		}

		private init(dropdownIdx: number) {
			this.setupAccessibility(dropdownIdx);
			this.setupEvents();
		}

		private setupAccessibility(dropdownIdx: number) {
			if (!this.trigger || !this.content) return;

			// Generate unique IDs for accessibility
			this.trigger.id = `starwind-dropdown${dropdownIdx}-trigger`;
			this.content.id = `starwind-dropdown${dropdownIdx}-content`;

			// Set up additional ARIA attributes
			this.trigger.setAttribute("aria-controls", this.content.id);
			this.content.setAttribute("aria-labelledby", this.trigger.id);
		}

		private setupEvents() {
			if (!this.trigger || !this.content) return;

			// Handle trigger click
			this.trigger.addEventListener("click", (e) => {
				e.preventDefault();
				this.toggleDropdown();
			});

			// Handle keyboard navigation
			this.trigger.addEventListener("keydown", (e) => {
				if (e.key === "Enter" || e.key === " ") {
					e.preventDefault();
					this.toggleDropdown();
				} else if (e.key === "Escape" && this.isOpen) {
					e.preventDefault();
					this.closeDropdown();
				}
			});

			// Close dropdown when clicking outside
			document.addEventListener("pointerdown", (e) => {
				if (this.isOpen && !this.dropdown.contains(e.target as Node)) {
					this.closeDropdown();
				}
			});

			// Handle keyboard navigation and item selection within dropdown
			this.content.addEventListener("keydown", (e) => {
				if (e.key === "Escape") {
					e.preventDefault();
					this.closeDropdown();
					this.trigger?.focus();
				}
			});

			// Handle item selection
			this.content.addEventListener("click", (e) => {
				const target = e.target as HTMLElement;
				const item = target.closest('[role="menuitem"]');
				if (item && !(item as HTMLElement).hasAttribute("data-disabled")) {
					// Close the dropdown after item selection
					this.closeDropdown();
				}
			});
		}

		private toggleDropdown() {
			if (this.isOpen) {
				this.closeDropdown();
			} else {
				this.openDropdown();
			}
		}

		private openDropdown() {
			if (!this.content || !this.trigger || this.trigger.disabled) return;

			this.isOpen = true;
			this.content.setAttribute("data-state", "open");
			this.trigger.setAttribute("aria-expanded", "true");
			this.content.style.removeProperty("display");

			// Set focus on the first menu item
			// setTimeout(() => {
			// 	const firstItem = this.content?.querySelector('[role="menuitem"]') as HTMLElement;
			// 	if (firstItem) {
			// 		firstItem.focus();
			// 	}
			// }, 10);

			this.positionContent();
		}

		private closeDropdown() {
			if (!this.content || !this.trigger) return;

			this.isOpen = false;
			this.content.setAttribute("data-state", "closed");

			// Set focus back on trigger
			requestAnimationFrame(() => {
				if (!this.trigger) return;
				this.trigger.focus();
			});

			// Give the content time to animate before hiding
			setTimeout(() => {
				if (!this.content) return;
				this.content.style.display = "none";
			}, this.animationDuration - 10);

			this.trigger.setAttribute("aria-expanded", "false");
		}

		private positionContent() {
			if (!this.content || !this.trigger) return;

			// Set content width to match trigger width
			this.content.style.width = "var(--starwind-dropdown-trigger-width)";
			this.content.style.setProperty(
				"--starwind-dropdown-trigger-width",
				`${this.trigger.offsetWidth}px`,
			);
		}
	}

	// Store instances in a WeakMap to avoid memory leaks
	const dropdownInstances = new WeakMap<HTMLElement, DropdownHandler>();

	// Initialize dropdowns
	const initDropdowns = () => {
		document.querySelectorAll(".starwind-dropdown").forEach((dropdown, idx) => {
			if (dropdown instanceof HTMLElement && !dropdownInstances.has(dropdown)) {
				dropdownInstances.set(dropdown, new DropdownHandler(dropdown, idx));
			}
		});
	};

	initDropdowns();
	document.addEventListener("astro:after-swap", initDropdowns);
</script>
